#!/usr/bin/env python
#

from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from logging                            import basicConfig, DEBUG, WARNING
import yaml

from mapi.log                           import Clog, center, cleave, cdebug
from mapi.client                        import MapiClient
from mapi.error                         import MapiError

# App
#
class App():
    '''
    '''

    # __init__
    #
    def __init__(s, args):
        s.args = args
        s.url   = 'http://%s/MAAS/api/1.0' % s.args.cfg['maas']['ip']
        s.creds = s.args.cfg['maas']['creds']

    # main
    #
    def main(s):
        center('App::main')
        retval = 1
        try:
            mc = MapiClient(s.url, s.creds)

            nodegroups = mc.nodegroups

            cdebug('nodegroups ---------------------------------------------------', 'yellow')

            # __len__()
            cdebug('    __len__()', 'blue')
            cdebug('        len(nodegroups): %d' % len(nodegroups))

            # __iter__()
            cdebug('    __iter__()', 'blue')
            for group in nodegroups:
                cdebug('        cluster name: \'%s\'' % group['cluster_name'])

            # __getitem__()
            cdebug('    __getitem__()', 'blue')
            cdebug('        cluster name: \'%s\'' % nodegroups[0]['cluster_name'])

            cdebug('power types --------------------------------------------------', 'yellow')

            ptypes = nodegroups.power_types

            # __len__()
            cdebug('    __len__()', 'blue')
            cdebug('        len(ptypes): %d' % len(ptypes))

            # __iter__()
            cdebug('    __iter__()', 'blue')
            for pt in ptypes:
                cdebug('        name: \'%s\'' % pt['name'])

            # __getitem__()
            cdebug('    __getitem__()', 'blue')
            cdebug('        name: \'%s\'' % ptypes[0]['name'])
            cdebug(ptypes[0])

            cdebug('interfaces ---------------------------------------------------', 'yellow')

            interfaces = nodegroups[0].interfaces

            # __len__()
            cdebug('    __len__()', 'blue')
            cdebug('        len(interfaces): %d' % len(interfaces))

            # __iter__()
            cdebug('    __iter__()', 'blue')
            for iface in interfaces:
                cdebug('            name: \'%s\'' % iface['name'])

            # __getitem__()
            cdebug('    __getitem__()', 'blue')
            cdebug('        name: \'%s\'' % interfaces[0]['name'])
            cdebug(interfaces[0])

            cdebug('boot images --------------------------------------------------', 'yellow')

            images = nodegroups[0].boot_images

            # __len__()
            cdebug('    __len__()', 'blue')
            cdebug('        len(images): %d' % len(images))

            # __iter__()
            cdebug('    __iter__()', 'blue')
            for i in images:
                cdebug('            release: \'%s\'  arch: \'%s\'  purpose:\'%s\'' % (i['release'], i['architecture'], i['purpose']))

            # __getitem__()
            cdebug('    __getitem__()', 'blue')
            cdebug('        release: \'%s\'' % images[0]['release'])
            cdebug(images[0])

            retval = 0

        except MapiError as e:
            print(e.reason)

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            print("Aborting ...")

        cleave('App::main')
        return retval

if __name__ == '__main__':
    app_description = '''
    '''

    app_epilog = '''
    '''

    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('config',  type=str, nargs=1,                     help='The configuration information for the MAAS server.')
    parser.add_argument('--debug', action='store_true', default=False,    help='Print out lots of stuff.')
    parser.add_argument('--nc',    action='store_true', default=False,    help='Debut output should not be colored.')

    args = parser.parse_args()

    cfg = yaml.safe_load(file(args.config[0]))
    setattr(args, 'cfg', cfg)
    if args.debug:
        level = DEBUG
        Clog.dbg = True
        Clog.color = not args.nc

    else:
        level = WARNING

    basicConfig(level=level, format="%(levelname)s - %(message)s")

    cdebug('args:')
    for k in vars(args):
        if k == 'cfg':
            cfg = getattr(args, 'cfg')
            cdebug('    cfg:')
            for c in cfg:
                if type(cfg[c]) is dict:
                    cdebug('        %s:' % (c))
                    for x in cfg[c]:
                        cdebug('            %s: %s' % (x, cfg[c][x]))
                else:
                    cdebug('        %s: %s' % (c, cfg[c]))
        else:
            cdebug('    %s: %s' % (k, getattr(args, k)))

    app = App(args)
    exit(app.main())

# vi:set ts=4 sw=4 expandtab syntax=python:

