#!/usr/bin/env python
#

from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from logging                            import basicConfig, DEBUG, WARNING
import yaml

from maasapi.log                        import Clog, center, cleave, cdebug
from maasapi.client                     import MapiClient
from maasapi.error                      import MapiError, MaasApiPowerResponseTimeout
from maasapi.user                       import User
from maasapi.tag                        import Tag

# App
#
class App():
    '''
    '''

    # __init__
    #
    def __init__(s, args):
        s.args = args
        s.url   = 'http://%s/MAAS/api/1.0' % s.args.cfg['maas']['ip']
        s.creds = s.args.cfg['maas']['creds']

    # dump
    #
    def _dump(s, d, title=None):
        if s.args.debug:
            if title:
                cdebug(title)
                cdebug('-------------------------------------------------------------------------------------------')
            if type(d) == dict:
                cdebug('{')
                for k in d:
                    cdebug('    %s : %s,' % (k, d[k]))
                cdebug('}')
            elif type(d) == list:
                cdebug('[')
                for k in d:
                    cdebug('    %s,' % (k))
                cdebug(']')
            else:
                cdebug('    %s,' % (d))

    # main
    #
    def main(s):
        center('App::main')
        retval = 1
        try:
            mc = MapiClient(s.url, s.creds)

            v = mc.version
            print('     version: %s' % v.version)
            print('  subversion: %s' % v.subversion)
            print('capabilities: %s' % ', '.join(v.capabilities))

            #   cdebug('nodes -----------------------------------------------------------', 'yellow')

            #   nodes = mc.nodes

            #   ## __len__()
            #   #cdebug('    __len__()', 'blue')
            #   #cdebug('        len(nodes): %d' % len(nodes))

            #   ## __getitem__()
            #   #nodes[0].dump(title='Node 0')
            #   #cdebug('    __getitem__()', 'blue')
            #   #cdebug('        system_id: \'%s\'' % nodes[0]['system_id'])

            #   ## __iter__()
            #   #cdebug('    __iter__()', 'blue')
            #   #for node in nodes:
            #   #    cdebug('            system_id: \'%s\'' % (node['system_id']))

            #   print('This MAAS server knows about %d nodes.' % len(nodes))
            #   for node in nodes:
            #       print('hostname: %s' % node['hostname'])
            #       try:
            #           print('    power state: %s' % node.power_state)
            #       except MaasApiPowerResponseTimeout:
            #           print('    power state: Broken')
            #       details = node.details
            #       print

            #   print(nodes[0].details)

            #cdebug('zones -----------------------------------------------------------', 'yellow')

            #zones = mc.zones

            ## __len__()
            #cdebug('    __len__()', 'blue')
            #cdebug('        len(zones): %d' % len(zones))

            #cdebug('for zone in zones:')
            #for zone in zones:
            #    print('name: \'%s\'  resource_uri: %s  description: \'%s\' ' % (zone['name'], zone['resource_uri'], zone['description']))

            ##del(zones['zip'])

            #cdebug('')
            #cdebug('for zone in zones:')
            #for zone in zones:
            #    print('name: \'%s\'  resource_uri: %s  description: \'%s\' ' % (zone['name'], zone['resource_uri'], zone['description']))

            #cdebug('settting "my zone"')
            #zones['zip'] = 'zap'

            #cdebug('users -----------------------------------------------------------', 'yellow')

            #users = mc.users

            #print('')
            #print('no. of users: %d' % len(users))

            #print('')
            #for user in users:
            #    print('username: %-24s    admin: %5s    email: \'%s\'' % (user.username, user.superuser, user.email))

            ##users.add(User(username='bradf', password='ubuntu', superuser=True, email='brad@foo.com'))

            tags = mc.tags

            print('')
            print('no. of tags: %d' % len(tags))

            print('')
            for tag in tags:
                print('name: %-24s    comment: %5s    definition: \'%s\'' % (tag.name, tag.comment, tag.definition))

            tags.add(Tag(name='intel-gpu', comment='Machines which have an Intel display driver', definition='contains(//node[@id="display"]/vendor, "Intel")'))

            print('')
            for tag in tags:
                print('name: %-24s    comment: %5s    definition: \'%s\'' % (tag.name, tag.comment, tag.definition))
            retval = 0

        except MapiError as e:
            print(e.reason)

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            print("Aborting ...")

        cleave('App::main')
        return retval

if __name__ == '__main__':
    app_description = '''
    '''

    app_epilog = '''
    '''

    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('config',  type=str, nargs=1,                     help='The configuration information for the MAAS server.')
    parser.add_argument('--debug', action='store_true', default=False,    help='Print out lots of stuff.')
    parser.add_argument('--nc',    action='store_true', default=False,    help='Debut output should not be colored.')

    args = parser.parse_args()

    cfg = yaml.safe_load(file(args.config[0]))
    setattr(args, 'cfg', cfg)
    if args.debug:
        level = DEBUG
        Clog.dbg = args.debug
        Clog.color = not args.nc
    else:
        level = WARNING

    basicConfig(level=level, format="%(levelname)s - %(message)s")

    cdebug('args:')
    for k in vars(args):
        if k == 'cfg':
            cfg = getattr(args, 'cfg')
            cdebug('    cfg:')
            for c in cfg:
                if type(cfg[c]) is dict:
                    cdebug('        %s:' % (c))
                    for x in cfg[c]:
                        cdebug('            %s: %s' % (x, cfg[c][x]))
                else:
                    cdebug('        %s: %s' % (c, cfg[c]))
        else:
            cdebug('    %s: %s' % (k, getattr(args, k)))

    app = App(args)
    exit(app.main())

# vi:set ts=4 sw=4 expandtab syntax=python:

